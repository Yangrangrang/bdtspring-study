<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>톰캣 서버로 웹앱 만들기</title>
</head>
<body>
	<%@include file="/headerNav.jsp" %>
	<main class = "container">
		<h1 class="mt-5">톰캣 서버에 동작하는 웹앱을 was라 부른다.</h1>
		<ul>
			<li>Web Application Server (was) : 웹서버에서 돌아가는 어플</li>
			<li>Web Application Archive (war) : 톰캣 서버에 배포하는 자바로 작성된 웹앱 압축파일</li>
			<li>Java Archive (jar) : 자바 라이브러리</li>
			<li>Dynamic Web project : 톰캣 서버에서 동작하는 웹 어플리션 구조</li>
			<li>아파치 톰캣 서버 : (아파치 http 서버 +) 자바에서 구동하는 웹 서버 (구현된 서버에 war 배포 실행하는 방식)</li>
		</ul>
		<h2>web.xml Development Descriptor DD, 배포서술자</h2>
		<ul>
			<li>톰캣 서버/ web.xml : 서버에 대한 설정이고, 배포서술자의 기본값</li>
			<li>webApp/web.xml : 배포하는(개발자) 사람에 의해 정의되는 서버 설정으로 우선순위가 기본값보다 높다.</li>
			<li>동적 파일과 정적 파일의 위치, 인코딩, 세션 설정 ...</li>
		</ul>
		<h2>톰캣 서버와 동적 리소스와 정적 리소스 관리</h2>
		<ul>
			<li>동적리소스(서버사이드) : 톰캣의 동적리소스 서블릿 		(Project/src/main/java/....)</li>
				<ol>
					<li>class를 생성하고 HttpServlet을 상속받고 DD(web.xml) 배포 서술자에 경로를 등록해야한다.</li>
					<li>client가 해당 동적리소스를 요청하면 톰캣이 자동으로 요청하고 응답하는 구조다.</li>
				</ol>
			<li>정적리소스 : html, css, js, img....	(Project/src/main/webapp/....)</li>
				<ol>
					<li>server의 default xml에서 요청이 오는 문서 중에 모든 정적 리소스를 webapp 하위에서 찾도록 설정되어 있다.</li>
					<li>express js : app.use(express.static('public')) 톰캣은 자동으로 되어 있다.</li>
					<li>톰캣은 기본 view template으로 jsp문서를 두고 있고 정적파일 취급한다.</li>
					<li>view template은 서버에서 랜더링되는 동적리소스지만 톰캣이 정적리소스 취급하면서 해킹 취약점이 노출되어 더이상 사용하지 않는다.</li>
				</ol>
		</ul>
		<h2>디자인 패턴 model1</h2><!-- EmpList가 예시 -->
		<ul>
			<li>model1은 초창기 동적리소스의 기본 디자인 패턴으로 원시적(아주아주 오래되고 더 이상 사용하면 안됨!) 모델</li>	
			<li>model1은 동적리소스와 응답하는 정적 리소스가 하나로 결합된 형태로 코드의 재사용과 유지보수가 어렵고 협업이 불가능하다.</li>
			<li>학습이 필요없고 작은 프로젝트의 구현이 빠른 장점이 있다.</li>
		</ul>
		<h2>디자인 패턴 model2 MVC</h2>
		<ul>
			<li>
				Model(db service) : 싱글턴패턴 재사용 가능한 DB Connection 을 만들고 sql결과를 파싱하는 DAO객체를 생성
				<ol>
					<li>DabaseAccessObject : 데이터 베이스의 테이블로 제공하는 서비스를 미리 정의하는 객체로 대체로 파싱한 dto와 결과를 반환 (쿼리 한개의 실행 결과를 메소드 단위로 정의)</li>
					<li>DAO : db로 제공하는 서비스가 대체로 비슷하게 중복되는 경향이 있어 인터페이스로 정의 후 사용한다.</li>
					<li>Service : 여러 sql의 실행을 하나의 서비스로 제공하는 객체 (transaction)</li>
					<li>싱글톤으로 구현한 getConn 객체 : db객체를 효율적으로 생성하는 객체 </li>
				</ol>
			</li>
			<li>View(Front end) : 템플릿 엔진인 jsp파일을 사용 (스크립트 엔진이기 떄문에 컴파일없이 뷰가 렌더링 된다.)</li>
			<li>Controller(Servlet Back end) : 서블릿 (하나의 동적페이지) 요청처리와 응답처리하는 서버사이드 페이지</li>
		</ul>
		<h2>디자인 패턴 Singleton pattern</h2>
		<!-- 처음에 객체를 만들어 static반환을 해줌 
			싱글톤은 private로 
		-->
		<ul>
			<li>멀티 스레드 환경 특히 서버에서 객체를 마구잡이로 생성하는 일이 발생해서 이것을 방지하기 위해 만들어진 디자인 패턴</li>
			<!-- 이런 모양으로 썻더니 좋더라 하는게 디자인 패턴 ex)getter,setter -->
			<li>static 필드와 접근지정자를 이용해서 생성하며 객체의 특성에 맞춰서 구조를 정해야한다.</li>
		</ul>
		<h2>서버가 브라우저에 저장하는 정보 쿠키</h2>
		<ul>
			<li>클라이언트가 특정 서버에 방문했을 때 서버가 클라이언트에게 남기는 정보</li>
			<li>서버가 쿠키의 만료시간을 지정하면 브라우저 쿠키를 생성할 때 지정된 시간으로 만료시간을 설정한다.(setTimeout과 유사하게 동작) // 일주일에서 하루 또는 30 정도 지정하는 편이다.</li>
			<li>목적 1. 특정 정보를 저장 (중요한 정보를 저장하는 것을 권장하지 않음 // 정보가 그대로 유출 보안의 취약)</li>
			<li>목적 2. 쿠키의 존재 유무로 상태를 파악하기 위해 사용 (광고 하루 뒤 보기)</li>
			<li>목적 3. 서버가 클라이언트에게 고유 ID를 부여한 후 접속한 브라우저를 구분하기 위해서 사용</li>
			<li>쿠키는 클라이언트가 서버에 요청 할 때마다 요청 본문에 같이 보낸다.</li>
		</ul>
		<h2>서버에 저장되는 클라이언트 정보 세션</h2>
		<ul>
			<li>클라이언트가 서버에 요청하면 서버에 남기는 클라이언트 정보</li>
			<li>HTTP통신은 전화나 소켓과 달리 (요청과 응답을 하면 접속이 끝이남) 요청시 서버와 접속을 유지하지 않는다.(요청과 응답으로 이루어진 통신 팩스와 비슷)</li>
			<li>http통신의 특정상 접속하고 있는 상태를 만들 방법이 없다.</li>
			<li>http 서버에 특정 클라이언트가 요청을 하면 (접속했다라는 상태를 만들기 위해) 클라이언트 정보를 담고 있는 만료시간이 30분인 객체를 만들고
				(그 객체에게 만료시간(default 30분)을 주어서 특정 시간동안) 30분간 접속하고 있는 척하는데 사용하는 객체가 세션이다.</li>
			<li>세션의 만료되기전에 재요청이 하면 만료시간을 초기화해서 접속하는 상태를 유지하는 척한다.</li>
			<li>로그인을 요청하면 세션 객체에 유저정보를 저장해서 접속하고 있는 인터페이스를 제공하는데 사용한다.</li>
			<li>서버가 모든 요청에 세션을 포함해서 전달한다.</li>
		</ul>
		
		
		<h2>프로젝트와 프로그래머의 기본 태도 (자소에 포함)</h2>
		<ol>
			<li>프로젝트 진행에 관해 계속 상담 요청을 해야한다. (프로그래밍 약속의 언어 -> 개발과 유지보수)</li>
			<li>모르는 것에 대한 탐구를 두려워 하지 않아야 한다. (구글링 못하는 일이 없다.)</li>
			<li>상대방 의견을 존중하고 들을 줄 알아야한다.</li>
			<!-- 오전 : 오늘 해야할 일 상담, 목표 정하기  -->
			<!-- 업무중 : git에 수시로 업무를 커밋  -->
			<!-- 오후 : 오늘 한일을 합쳐서 검사  -->
		</ol>
		<!-- 
			파일업로드
			json으로 응답하는 서블릿 페이지(ajax 요청) 가입확인, paging(Read 위주)
			//ajax의 뜻 : 브라우저에서 통신을 하면 url (동기식)객체로 통신을 해서 여기만 바꿔(비동기식 ajax)
			받을 수 있는게 json html xml >> 
			페이징 (레코드가 많은 테이블)
			쿠키 (하루 뒤에 보는 배너), 세션(로그인, 리다이렉트 페이지에 파라미터 전달)
			필터
			-> git (버전관리) , github(버전관리 + 프로젝트 공유)
			-> 스프링 (대부분을 자동으로 처리)
		 -->
		 
		 <!-- 
		 	브라우저에 보면 쿠키객체가 숨겨져 있다 검사>어플리케이션>쿠키s 
		 	서버가 클라이언트한테 남겨놓는 정보들 
		 	항상 있는게 아니라 기간이 정해져있다.
		 	url마다 쿠키를 저장할 수 있다.
		 -->
	</main>
</body>
</html>



